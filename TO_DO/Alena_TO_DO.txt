ADD in TO_DO.txt
make && make clean &&  ./cub3D ./maps/empty.cub  

MAP
MAP (count start from 1):
first 8 lines only textures and colours and at  x >=7

frm 
y>=0 && y<=7
y>=0 && y<=7
map can start from line 9 and must have at 
map y >= 3 lines
map x >= 3 colomns

check how many players

//TODO add check first if in map exist first and lat line ,
//first line - after 8 lines of code
//last line - after at least 10 lines of code
// then check if nothing is after last line except " " and "\n"
//start searchig first line from beginn
//start searchig last line from end
//write nbr_first_line in struct

//TODO : Add check map
	// if (game->map.cols == 0 && game->map.rows == 0)
	// 	error_map_exit_game(game, "Map is empty");
	// printf ("rows: %d, cols: %d\n", game->map.rows, game->map.cols);
	// if (game->map.rows < 3)
	// 	error_map_exit_game(game, "Map is not valid");
/* 

//save info before map in structure, not in map
//save max as for num rows
//save max as for num cols
//TODO:  NEED TO GO IN SAVED MAP
// CHECK SIZE
// CHECK IF THEE IS STRUCTURES
//SKIP empty LINES
//find and write in struct position of first line
// check the position of first and last line 
//- where position in file (must be at the end)
*/

---------------------------------------
MAP_INFO:
	[]each type of information from an element can be separated by one or more space(s).
	[] map_info  lines can be with \n or ' ' - ignore them
	[] can be different order for maps_info


TEXTURES	
	[]LETTERS: NO|SO|WE|EA
	[] PATH:
		[]cann be opened in read mode only?
		[] check texture in not empty file
	[] LETTERS
		[]NO|SO|WE|EA
		[]fill player_struct, according to  player_direction NO|SO|WE|EA:
		[] if (dir_x== 0 && dir_y==0) error_exit("No direction for player set)
	[] is valid path:
COLORS:
	[] valid letters: F|C
	[] if real RGB colours (220,100,0= R,G,B colors in range [0,255]: 0, 255, 255)
	[] the smallest RGB color is (0, 0, 0), which corresponds to black.
	[] get color from *char to UInt
		Color 1: RGB(255, 69, 0) - This corresponds to a shade of orange.

	Uint value: 0xFF4500
	Color 2: RGB(0, 255, 0) - This corresponds to pure green.

	Uint value: 0x00FF00
	Color 3: RGB(0, 0, 255) - This corresponds to pure blue.

	Uint value: 0x0000FF
------------------------------------------
MAP:
	[]  map must be allways LAST in map.cub
	[] spaces before and after main map walls are part of the map
	[] INSIDE map:
		[] no \n new lines
		[] no spaces incide map between walls
	[]	must be surrounded by walls:
		[]if each line begin and ends with 1
		[]if each line begin and ends with 1
	[]  add flood_fill to check, if player on start game surrounded by walls

PLAYER:
	[] CHECK IF ONLY ONE PLAYER
	[] SAVE PLAYER information in struct:
	[] player: start coordinates
	[] player: direction N|S|O|E
	[]  is player position surrounded by walls with no moves(flood_fill to check)


/* The map must be:
1. closed/surrounded by walls, if not the program must return an error.
2. Except for the map content, each type of element can be separated by one or more empty line(s).
3.  Except for the map content which always has to be the last, each type of element can be set in any order in the file.

4. Except for the map, each type of information from an element can be separated by one or more space(s).

5. The map must be parsed as it looks in the file. Spaces are a valid part of the map and are up to you to handle. 

6. You must be able to parse any kind of map, as long as it respects the rules of the map. 

_______./maps/map.cub_________________________
NO ./path_to_the_north_texture
SO ./path_to_the_south_texture
WE ./path_to_the_west_texture
EA ./path_to_the_east_texture
F 220,100,0
C 225,30,0
1111111111111111111111111
1000000000110000000000001
1011000001110000000000001
1001000000000000000000001
111111111011000001110000000000001
100000000011000001110111111111111
11110111111111011100000010001
11110111111111011101010010001
11000000110101011100000010001
10000000000000001100000010001
10000000000000001101010010001
11000001110101011111011110N0111
11110111 1110101 101111010001
11111111 1111111 111111111111
____________./maps/map.cub_________________________
*/




//___________________MAIN for parsing and tests(ALENA)____________________________________
/* 
./cub3D ./maps/empty.cub 
 */
/* 
PRINTF FOR DEBUG
// 	/// MY CHECK PRINTS
// 	print_map(&game);
// 	print_map_structure(&game);  

printf("string:|%s|\ntemp:|%s|\n", string, temp);
printf("%s, len_argv1=%d\n", argv[1], len_argv1);
printf("ENTERED HIER\n");
 */

//NOW

///______________MAIN.WORKING HERE
int	main(int argc, char **argv)
{
	t_game	game;
	map_file_check(t_game *game, argc, argv); //NEW
	init_map_structure(&game);
	init_player_structure(&game);
	map_read_save(&game, argv[1]);
	//save_map_textures_and_colors(&game);
	//check_maps_characters(&game); //from map_check.c

//--------------print map__structure---------------------
	print_map(&game);
	print_map_structure(&game);  
//-------------------------------

	//  init_game_struct(&game);
	// mlx_set_cursor(game.mlx, mlx_create_cursor(game.textures.cursor));
	// mlx_cursor_hook(game.mlx, cursor, &game);
	// mlx_mouse_hook(game.mlx, mouse, &game);
	// mlx_key_hook(game.mlx, key_hook, &game);
	// mlx_loop_hook(game.mlx, ft_hook, &game);
	// system("/usr/bin/aplay -q ./music/main.wav &");
	// system("/usr/bin/aplay -q ./music/hellothere.wav &");
	// mlx_loop(game.mlx);
	// free_game(&game);
	return (EXIT_SUCCESS);
}
//__________________________________________



	// dprintf(2,"name_txtr after :%s\n",name_txtr); -- for deburg in STDERR